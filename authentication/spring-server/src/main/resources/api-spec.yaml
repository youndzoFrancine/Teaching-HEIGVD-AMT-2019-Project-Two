openapi: 3.0.0
info:
  title: Authentication api
  description: An API for authentication purposes
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.0-oas3
paths:
  /login:
    post:
      description: have access to ressources
      operationId: login
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Credentials'
      responses:
        '201':
          description: created
        '401':
          $ref: '#/components/responses/UnauthorizedError'
  /reset_password:
    post:
      description: have access to ressources
      operationId: forgot password
      requestBody:
        content:
          application/json:
            schema:
              type: string
              description: The user e_mail
      responses:
        '201':
          description: update
        '401':
          $ref: '#/components/responses/UnauthorizedError'
  /update_password:
    post:
      description: have access to ressources
      operationId: reset password
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ResetPwrd'
      responses:
        '201':
          description: update
        '401':
          $ref: '#/components/responses/UnauthorizedError'
      security:
        - bearerAuth: [ ]
  /register:
    post:
      description: create a user
      operationId: createUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
      responses:
        '201':
          description: created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        '401':
          $ref: '#/components/responses/UnauthorizedError'
      security:
        -  bearerAuth: [ ]
  /users:
    get:
      description: get the list of users
      operationId: getUsers
      parameters:
        - in: query
          name: page
          description: Page number
          required: false
          schema:
            type: integer
            default: 1
        - in: query
          name: pageSize
          description: number of elements per page
          required: false
          schema:
            type: integer
            default: 20
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserMin'
          links:
            NextLink:
              $ref: '#/components/links/PaginateUserAll'
            LastLink:
              $ref: '#/components/links/PaginateUserAll'
            FirstLink:
              $ref: '#/components/links/PaginateUserAll'
            PrevLink:
              $ref: '#/components/links/PaginateUserAll'

      security:
        -  bearerAuth: [ ]

  /users/{e_mail}:
    patch:
      description: updates a single user based on the e_mail supplied
      operationId: updateUser
      parameters:
        - name: e_mail
          in: path
          required: true
          schema:
            type: string
            description: The user e_mail
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserMin"
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserMin'
        '202':
          description: ACCEPTED
        '401':
          $ref: '#/components/responses/UnauthorizedError'
      security:
        - bearerAuth: [ ]
    delete:
      description: deletes a single user based on the e_mail supplied
      operationId: deleteUser
      parameters:
        - name: e_mail
          in: path
          required: true
          schema:
            type: string
            description: The user e_mail
      responses:
        '200':
          description: success
        '401':
          $ref: '#/components/responses/UnauthorizedError'
      security:
        - bearerAuth: [ ]
  /users/block/{e_mail}:
    patch:
      description: the admin block a user
      operationId: blockUser
      parameters:
        - name: e_mail
          in: path
          required: true
          schema:
            type: string
            description: The user e_mail
      responses:
        '202':
          description: ACCEPTED
        '401':
          $ref: '#/components/responses/UnauthorizedError'
      security:
        - bearerAuth: [ ]
  /users/unblock/{e_mail}:
    patch:
      description: the admin block a user
      operationId: unblockUser
      parameters:
        - name: e_mail
          in: path
          required: true
          schema:
            type: string
            description: The user e_mail
      responses:
        '202':
            description: ACCEPTED
        '401':
          $ref: '#/components/responses/UnauthorizedError'
      security:
        - bearerAuth: [ ]

components:
  securitySchemes:
    bearerAuth:
      description: "Give the token at each user"
      type: apiKey
      name: Authorization
      in: header
  links:
    PaginateUserAll:
      description: >
        This link with grab another set of users
      operationId: getAllUsers
      parameters:
        page: '$request.path.page'
        pageSize: '$request.path.page'
  schemas:
    UserMin:
      type: object
      properties:
        firstname:
          type: string
        lastname:
          type: string
        role:
          type: string
    User:
      allOf:
        - $ref: '#/components/schemas/UserMin'
        - type: object
          properties:
            email:
              type: string
            password:
              type: string
            isBlock:
              type: string
    Credentials:
      type: object
      properties:
        email:
          type: string
        password:
          type: string
    ResetPwrd:
      type: object
      properties:
        old_pswrd:
          type: string
        new_pswrd:
          type: string
        email:
          type: string
  responses:
    UnauthorizedError:
      description: Access token is missing or is invalid
