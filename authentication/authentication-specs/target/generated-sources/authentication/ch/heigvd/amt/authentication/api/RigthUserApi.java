/*
 * Authentication api
 * An API for authentication purposes
 *
 * The version of the OpenAPI document: 1.0.0-oas3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package ch.heigvd.amt.authentication.api;

import ch.heigvd.amt.authentication.ApiCallback;
import ch.heigvd.amt.authentication.ApiClient;
import ch.heigvd.amt.authentication.ApiException;
import ch.heigvd.amt.authentication.ApiResponse;
import ch.heigvd.amt.authentication.Configuration;
import ch.heigvd.amt.authentication.Pair;
import ch.heigvd.amt.authentication.ProgressRequestBody;
import ch.heigvd.amt.authentication.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import ch.heigvd.amt.authentication.dto.User;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class RigthUserApi {
    private ApiClient localVarApiClient;

    public RigthUserApi() {
        this(Configuration.getDefaultApiClient());
    }

    public RigthUserApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for updateUser
     * @param eMail  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Access token is missing or invalid </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateUserCall(String eMail, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/users/{e_mail}"
            .replaceAll("\\{" + "e_mail" + "\\}", localVarApiClient.escapeString(eMail.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateUserValidateBeforeCall(String eMail, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'eMail' is set
        if (eMail == null) {
            throw new ApiException("Missing the required parameter 'eMail' when calling updateUser(Async)");
        }
        

        okhttp3.Call localVarCall = updateUserCall(eMail, _callback);
        return localVarCall;

    }

    /**
     * 
     * updates a single user based on the e_mail supplied
     * @param eMail  (required)
     * @return User
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Access token is missing or invalid </td><td>  -  </td></tr>
     </table>
     */
    public User updateUser(String eMail) throws ApiException {
        ApiResponse<User> localVarResp = updateUserWithHttpInfo(eMail);
        return localVarResp.getData();
    }

    /**
     * 
     * updates a single user based on the e_mail supplied
     * @param eMail  (required)
     * @return ApiResponse&lt;User&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Access token is missing or invalid </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<User> updateUserWithHttpInfo(String eMail) throws ApiException {
        okhttp3.Call localVarCall = updateUserValidateBeforeCall(eMail, null);
        Type localVarReturnType = new TypeToken<User>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * updates a single user based on the e_mail supplied
     * @param eMail  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Access token is missing or invalid </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateUserAsync(String eMail, final ApiCallback<User> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateUserValidateBeforeCall(eMail, _callback);
        Type localVarReturnType = new TypeToken<User>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
